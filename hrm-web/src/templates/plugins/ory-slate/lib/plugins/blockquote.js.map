{"version":3,"sources":["../../src/plugins/blockquote.js"],"names":["BLOCKQUOTE","BlockquotePlugin","props","DEFAULT_NODE","Plugin","Button","editorState","onChange","onClick","e","preventDefault","isActive","blocks","some","Boolean","document","getClosest","block","key","parent","type","change","unwrapBlock","wrapBlock","value","name","schema","nodes","plugins","typeDefault","toolbarButtons","deserialize","el","next","tagName","toLowerCase","object","childNodes","serialize","children","textAlign","data","get","renderNode","node"],"mappings":";;;;;;;AAuBA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;;;+eA5BA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;AASO,IAAMA,kCAAa,uBAAnB;;IAEcC,gB;;;AACnB,4BAAYC,KAAZ,EAA0B;AAAA;;AAAA,oIAClBA,KADkB;;AAAA;;AAGxB,UAAKC,YAAL,GAAoBD,MAAMC,YAA1B;AAHwB;AAIzB;;AAED;;;;EAP4CC,gB;;;OAQ5CC,M,GAAS,gBAAsC;AAAA,QAAnCC,WAAmC,QAAnCA,WAAmC;AAAA,QAAtBC,QAAsB,QAAtBA,QAAsB;;AAC7C,QAAMC,UAAU,SAAVA,OAAU,IAAK;AACnBC,QAAEC,cAAF;;AAEA,UAAMC,WAAWL,YAAYM,MAAZ,CAAmBC,IAAnB,CAAwB;AAAA,eACvCC,QACER,YAAYS,QAAZ,CAAqBC,UAArB,CACEC,MAAMC,GADR,EAEE;AAAA,iBAAUC,OAAOC,IAAP,KAAgBpB,UAA1B;AAAA,SAFF,CADF,CADuC;AAAA,OAAxB,CAAjB;;AASA,UAAIqB,SAASf,YAAYe,MAAZ,EAAb;;AAEA,UAAIV,QAAJ,EAAc;AACZU,iBAASA,OAAOC,WAAP,CAAmBtB,UAAnB,CAAT;AACD,OAFD,MAEO;AACLqB,iBAASA,OAAOE,SAAP,CAAiBvB,UAAjB,CAAT;AACD;;AAEDO,eAAS,EAAEiB,OAAOH,OAAOG,KAAhB,EAAT;AACD,KArBD;;AAuBA,QAAMb,WAAWL,YAAYM,MAAZ,CAAmBC,IAAnB,CAAwB;AAAA,aACvCC,QACER,YAAYS,QAAZ,CAAqBC,UAArB,CACEC,MAAMC,GADR,EAEE;AAAA,eAAUC,OAAOC,IAAP,KAAgBpB,UAA1B;AAAA,OAFF,CADF,CADuC;AAAA,KAAxB,CAAjB;;AASA,WACE,8BAAC,sBAAD;AACE,eAASQ,OADX;AAEE,gBAAUG,QAFZ;AAGE,YAAM,8BAAC,qBAAD;AAHR,MADF;AAOD,G;;OAEDc,I,GAAO,Y;OAEPC,M,GAAS;AACPC,+BACG3B,UADH,EACgB,0BAAY,YAAZ,CADhB;AADO,G;OAMT4B,O,GAAU,CACR,mCAAuB;AACrBR,UAAMpB,UADe;AAErB6B,iBAAa,KAAK1B;AAFG,GAAvB,CADQ,C;OAOV2B,c,GAAiB,CAAC,KAAKzB,MAAN,C;;OAEjB0B,W,GAAc,UAACC,EAAD,EAAKC,IAAL,EAAc;AAC1B,YAAQD,GAAGE,OAAH,CAAWC,WAAX,EAAR;AACE,WAAK,YAAL;AACE,eAAO;AACLC,kBAAQ,OADH;AAELhB,gBAAMpB,UAFD;AAGL2B,iBAAOM,KAAKD,GAAGK,UAAR;AAHF,SAAP;AAFJ;AAQD,G;;OAEDC,S,GAAY,UACVF,MADU,EAEVG,QAFU,EAGP;AACH,QAAIH,OAAOA,MAAP,KAAkB,OAAtB,EAA+B;AAC7B;AACD;AACD,YAAQA,OAAOhB,IAAf;AACE,WAAKpB,UAAL;AACE,eACE;AAAA;AAAA,YAAY,OAAO,EAAEwC,WAAWJ,OAAOK,IAAP,CAAYC,GAAZ,CAAgB,OAAhB,CAAb,EAAnB;AACGH;AADH,SADF;AAFJ;AAQD,G;;OAEDI,U,GAAa,iBAAS;AACpB,YAAQzC,MAAM0C,IAAN,CAAWxB,IAAnB;AACE,WAAKpB,UAAL;AAAiB;AACf,iBACE;AAAA;AAAA,cAAY,OAAO,EAAEwC,WAAWtC,MAAM0C,IAAN,CAAWH,IAAX,CAAgBC,GAAhB,CAAoB,OAApB,CAAb,EAAnB;AACGxC,kBAAMqC;AADT,WADF;AAKD;AAPH;AASD,G;;;kBAzGkBtC,gB","file":"blockquote.js","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\n/* eslint-disable prefer-reflect, default-case, react/display-name */\nimport BlockquoteIcon from '@material-ui/icons/FormatQuote'\nimport React from 'react'\nimport createBlockquotePlugin from 'slate-edit-blockquote'\n\nimport { makeTagNode, ToolbarButton } from '../helpers'\nimport Plugin from './Plugin'\nimport type { Props } from './props'\n\nexport const BLOCKQUOTE = 'BLOCKQUOTE/BLOCKQUOTE'\n\nexport default class BlockquotePlugin extends Plugin {\n  constructor(props: Props) {\n    super(props)\n\n    this.DEFAULT_NODE = props.DEFAULT_NODE\n  }\n\n  // eslint-disable-next-line react/display-name\n  Button = ({ editorState, onChange }: Props) => {\n    const onClick = e => {\n      e.preventDefault()\n\n      const isActive = editorState.blocks.some(block =>\n        Boolean(\n          editorState.document.getClosest(\n            block.key,\n            parent => parent.type === BLOCKQUOTE\n          )\n        )\n      )\n\n      let change = editorState.change()\n\n      if (isActive) {\n        change = change.unwrapBlock(BLOCKQUOTE)\n      } else {\n        change = change.wrapBlock(BLOCKQUOTE)\n      }\n\n      onChange({ value: change.value })\n    }\n\n    const isActive = editorState.blocks.some(block =>\n      Boolean(\n        editorState.document.getClosest(\n          block.key,\n          parent => parent.type === BLOCKQUOTE\n        )\n      )\n    )\n\n    return (\n      <ToolbarButton\n        onClick={onClick}\n        isActive={isActive}\n        icon={<BlockquoteIcon />}\n      />\n    )\n  }\n\n  name = 'blockquote'\n\n  schema = {\n    nodes: {\n      [BLOCKQUOTE]: makeTagNode('blockquote')\n    }\n  }\n\n  plugins = [\n    createBlockquotePlugin({\n      type: BLOCKQUOTE,\n      typeDefault: this.DEFAULT_NODE\n    })\n  ]\n\n  toolbarButtons = [this.Button]\n\n  deserialize = (el, next) => {\n    switch (el.tagName.toLowerCase()) {\n      case 'blockquote':\n        return {\n          object: 'block',\n          type: BLOCKQUOTE,\n          nodes: next(el.childNodes)\n        }\n    }\n  }\n\n  serialize = (\n    object: { type: string, object: string, data: any },\n    children: any[]\n  ) => {\n    if (object.object !== 'block') {\n      return\n    }\n    switch (object.type) {\n      case BLOCKQUOTE:\n        return (\n          <blockquote style={{ textAlign: object.data.get('align') }}>\n            {children}\n          </blockquote>\n        )\n    }\n  }\n\n  renderNode = props => {\n    switch (props.node.type) {\n      case BLOCKQUOTE: {\n        return (\n          <blockquote style={{ textAlign: props.node.data.get('align') }}>\n            {props.children}\n          </blockquote>\n        )\n      }\n    }\n  }\n}\n"]}